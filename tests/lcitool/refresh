#!/usr/bin/python3
#
# Re-generate container recipes
#
# This script uses the "lcitool" available from
#
#   https://gitlab.com/libvirt/libvirt-ci
#
# Copyright (c) 2020 Red Hat Inc.
#
# This work is licensed under the terms of the GNU GPL, version 2
# or (at your option) any later version. See the COPYING file in
# the top-level directory.

import sys
import os
import subprocess

from pathlib import Path

if len(sys.argv) != 1:
   print("syntax: %s" % sys.argv[0], file=sys.stderr)
   sys.exit(1)

self_dir = Path(__file__).parent
src_dir = self_dir.parent.parent
dockerfiles_dir = Path(src_dir, "tests", "docker", "dockerfiles")

lcitool_path = Path(self_dir, "libvirt-ci", "lcitool")

lcitool_cmd = [lcitool_path, "--data-dir", self_dir]

def atomic_write(filename, content):
   tmp = filename.with_suffix(filename.suffix + ".tmp")
   try:
      with tmp.open("w") as fp:
         print(content, file=fp, end="")
         tmp.rename(filename)
   except Exception as ex:
      tmp.unlink()
      raise

def generate(filename, cmd, trailer):
   print("Generate %s" % filename)
   lcitool=subprocess.run(cmd, capture_output=True)

   if lcitool.returncode != 0:
      raise Exception("Failed to generate %s: %s" % (filename, lcitool.stderr))

   content = lcitool.stdout.decode("utf8")
   if trailer is not None:
      content += trailer
   atomic_write(filename, content)

def generate_dockerfile(host, target, cross=None, trailer=None):
   filename = Path(src_dir, "tests", "docker", "dockerfiles", host + ".docker")
   cmd = lcitool_cmd + ["dockerfile"]
   if cross is not None:
      cmd.extend(["--cross", cross])
   cmd.extend([target, "qemu"])
   generate(filename, cmd, trailer)

try:
   generate_dockerfile("centos8", "centos-8")
   generate_dockerfile("fedora", "fedora-35")

   sys.exit(0)
except Exception as ex:
   print(str(ex), file=sys.stderr)
   sys.exit(1)
